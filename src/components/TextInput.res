// generated by scripts/gen_component.js

include ReactNative.TextInput

module Compat = ReactNative.TextInput

@react.component @module("react-native")
external make: (
  ~ref: ref=?,
  // TextInput props
  ~allowFontScaling: bool=?,
  ~autoCapitalize: autoCapitalize=?,
  ~autoComplete: autoComplete=?,
  ~autoCorrect: bool=?,
  ~autoFocus: bool=?,
  ~blurOnSubmit: bool=?,
  ~caretHidden: bool=?,
  ~clearButtonMode: @string
  [
    | #never
    | @as("while-editing") #whileEditing
    | @as("unless-editing") #unlessEditing
    | #always
  ]=?,
  ~clearTextOnFocus: bool=?,
  ~contextMenuHidden: bool=?,
  ~defaultValue: string=?,
  ~disableFullscreenUI: bool=?,
  ~editable: bool=?,
  ~enablesReturnKeyAutomatically: bool=?,
  ~importantForAutofill: importantForAutofill=?,
  ~inlineImageLeft: string=?,
  ~inlineImagePadding: float=?,
  ~inputAccessoryViewID: string=?,
  ~keyboardAppearance: keyboardAppearance=?,
  ~keyboardType: @string
  [
    | #default
    | @as("number-pad") #numberPad
    | @as("decimal-pad") #decimalPad
    | #numeric
    | @as("email-address") #emailAddress
    | @as("phone-pad") #phonePad
    | @as("ascii-capable") #asciiCapable
    | @as("numbers-and-punctuation") #numbersAndPunctuation
    | #url
    | @as("name-phone-pad") #namePhonePad
    | #twitter
    | @as("web-search") #webSearch
    | @as("visible-password") #visiblePassword
  ]=?,
  ~maxFontSizeMultiplier: float=?,
  ~maxLength: int=?,
  ~multiline: bool=?,
  ~numberOfLines: int=?,
  ~onBlur: Event.targetEvent => unit=?,
  ~onChange: changeEvent => unit=?,
  ~onChangeText: string => unit=?,
  ~onContentSizeChange: contentSizeChangeEvent => unit=?,
  ~onEndEditing: editingEvent => unit=?,
  ~onFocus: Event.targetEvent => unit=?,
  ~onKeyPress: keyPressEvent => unit=?,
  ~onPressIn: Event.pressEvent => bool=?,
  ~onPressOut: Event.pressEvent => bool=?,
  ~onScroll: scrollEvent => unit=?,
  ~onSelectionChange: selectionChangeEvent => unit=?,
  ~onSubmitEditing: editingEvent => unit=?,
  ~placeholder: string=?,
  ~placeholderTextColor: Color.t=?,
  ~returnKeyLabel: string=?,
  ~returnKeyType: @string
  [
    | @as("done") #done_
    | #go
    | #next
    | #search
    | #send
    | #none
    | #previous
    | #default
    | @as("emergency-call") #emergencyCall
    | #google
    | #join
    | #route
    | #yahoo
  ]=?,
  ~rejectResponderTermination: bool=?,
  ~scrollEnabled: bool=?,
  ~secureTextEntry: bool=?,
  ~selection: selection=?,
  ~selectionColor: Color.t=?,
  ~selectTextOnFocus: bool=?,
  ~showSoftInputOnFocus: bool=?,
  ~spellCheck: bool=?,
  ~textBreakStrategy: textBreakStrategy=?,
  ~textContentType: textContentType=?,
  ~underlineColorAndroid: Color.t=?,
  ~value: string=?,
  // rescript-react-native 0.64 || 0.65 || 0.66 View props
  ~accessibilityActions: array<Accessibility.actionInfo>=?,
  ~accessibilityElementsHidden: bool=?,
  ~accessibilityHint: string=?,
  ~accessibilityIgnoresInvertColors: bool=?,
  ~accessibilityLabel: string=?,
  ~accessibilityLiveRegion: Accessibility.liveRegion=?,
  ~accessibilityRole: Accessibility.role=?,
  ~accessibilityState: Accessibility.state=?,
  ~accessibilityValue: Accessibility.value=?,
  ~accessibilityViewIsModal: bool=?,
  ~accessible: bool=?,
  ~collapsable: bool=?,
  ~hitSlop: View.edgeInsets=?,
  ~importantForAccessibility: @string
  [
    | #auto
    | #yes
    | #no
    | @as("no-hide-descendants") #noHideDescendants
  ]=?,
  ~nativeID: string=?,
  ~needsOffscreenAlphaCompositing: bool=?,
  ~onAccessibilityAction: Accessibility.actionEvent => unit=?,
  ~onAccessibilityEscape: unit => unit=?,
  ~onAccessibilityTap: unit => unit=?,
  ~onLayout: Event.layoutEvent => unit=?,
  ~onMagicTap: unit => unit=?,
  // Gesture Responder props
  ~onMoveShouldSetResponder: Event.pressEvent => bool=?,
  ~onMoveShouldSetResponderCapture: Event.pressEvent => bool=?,
  ~onResponderEnd: Event.pressEvent => unit=?,
  ~onResponderGrant: Event.pressEvent => unit=?,
  ~onResponderMove: Event.pressEvent => unit=?,
  ~onResponderReject: Event.pressEvent => unit=?,
  ~onResponderRelease: Event.pressEvent => unit=?,
  ~onResponderStart: Event.pressEvent => unit=?,
  ~onResponderTerminate: Event.pressEvent => unit=?,
  ~onResponderTerminationRequest: Event.pressEvent => bool=?,
  ~onStartShouldSetResponder: Event.pressEvent => bool=?,
  ~onStartShouldSetResponderCapture: Event.pressEvent => bool=?,
  ~pointerEvents: @string
  [
    | #auto
    | #none
    | @as("box-none") #boxNone
    | @as("box-only") #boxOnly
  ]=?,
  ~removeClippedSubviews: bool=?,
  ~renderToHardwareTextureAndroid: bool=?,
  ~shouldRasterizeIOS: bool=?,
  ~style: Style2.t<[< Style2.textStyle]>=?,
  ~testID: string=?,
  ~children: React.element=?,
  // react-native-web 0.16 View props
  ~href: string=?,
  ~hrefAttrs: Web.hrefAttrs=?,
  ~onMouseDown: ReactEvent.Mouse.t => unit=?,
  ~onMouseEnter: ReactEvent.Mouse.t => unit=?,
  ~onMouseLeave: ReactEvent.Mouse.t => unit=?,
  ~onMouseMove: ReactEvent.Mouse.t => unit=?,
  ~onMouseOver: ReactEvent.Mouse.t => unit=?,
  ~onMouseOut: ReactEvent.Mouse.t => unit=?,
  ~onMouseUp: ReactEvent.Mouse.t => unit=?,
) => React.element = "TextInput"

