const fs = require("fs");
const path = require("path");

const style_map = {
  ActivityIndicator: "viewStyle",
  DatePickerIOS: "viewStyle",
  DrawerLayoutAndroid: "viewStyle",
  FlatList: {
    contentContainerStyle: "viewStyle",
    style: "viewStyle",
    _ListFooterComponentStyle: "viewStyle",
    _ListHeaderComponentStyle: "viewStyle",
    columnWrapperStyle: "viewStyle",
  },
  Image: "imageStyle",
  ImageBackground: {
    imageStyle: "imageStyle",
    style: "viewStyle",
  },
  InputAccessoryView: "viewStyle",
  KeyboardAvoidingView: {
    contentContainerStyle: "viewStyle",
    style: "viewStyle",
  },
  MaskedViewIOS: "viewStyle",
  Pressable: "__inline:interactionState => Style2.t<[< Style2.viewStyle]>",
  ProgressBarAndroid: "viewStyle",
  ProgressViewIOS: "viewStyle",
  RefreshControl: "viewStyle",
  SafeAreaView: "viewStyle",
  ScrollView: {
    contentContainerStyle: "viewStyle",
    style: "viewStyle",
  },
  SectionList: {
    contentContainerStyle: "viewStyle",
    style: "viewStyle",
    _ListFooterComponentStyle: "viewStyle",
    _ListHeaderComponentStyle: "viewStyle",
  },
  SegmentedControlIOS: "viewStyle",
  Slider: "viewStyle",
  SnapshotViewIOS: "viewStyle",
  Switch: "viewStyle",
  Text: "textStyle",
  TextInput: "textStyle",
  TouchableHighlight: "viewStyle",
  TouchableOpacity: "viewStyle",
  View: "viewStyle",
  VirtualizedList: {
    contentContainerStyle: "viewStyle",
    style: "viewStyle",
    _ListFooterComponentStyle: "viewStyle",
    _ListHeaderComponentStyle: "viewStyle",
  },
  VirtualizedSectionList: {
    contentContainerStyle: "viewStyle",
    style: "viewStyle",
    _ListFooterComponentStyle: "viewStyle",
    _ListHeaderComponentStyle: "viewStyle",
  },
};

function generateTypeReplacement(entry) {
  if (typeof entry === "string") {
    return generateTypeReplacement({ style: entry });
  }
  const vals = {};
  Object.entries(entry).forEach(([key, value]) => {
    vals[key] = value.startsWith("__inline:")
      ? value.replace("__inline:", "")
      : `Style2.t<[< Style2.${value}]>`;
  });
  return vals;
}

const rescript_pattern = /^(.*)\~(\w+):\s*Style\.t(.*)$/;

function regenerateFile(moduleName, spec, originalModule) {
  let buffer = `// generated by scripts/gen_component.js

include ReactNative.${moduleName}

module Compat = ReactNative.${moduleName}

`;
  let beginPrint = false;
  for (const line of originalModule) {
    if (line.includes("@react.component")) {
      beginPrint = true;
    }
    if (beginPrint) {
      const match = rescript_pattern.exec(line);
      if (match) {
        const key = match[2];
        const type = spec[key];
        buffer += `${match[1]}~${match[2]}: ${type}${match[3]}\n`;
      } else {
        buffer += line + "\n";
      }
    }
  }
  return buffer;
}

const module_path = path.resolve(
  __dirname,
  "..",
  "node_modules",
  "rescript-react-native",
  "src",
  "components"
);

for (const item of Object.keys(style_map)) {
  console.log(`Component ${item}:`);
  const keys = generateTypeReplacement(style_map[item]);
  const originalModule = fs
    .readFileSync(path.resolve(module_path, `${item}.res`))
    .toString()
    .split("\n");
  const output = regenerateFile(item, keys, originalModule);
  fs.writeFileSync(
    path.resolve(__dirname, "..", "src", "components", `${item}.res`),
    output
  );
}

module.exports.components = Object.keys(style_map);
